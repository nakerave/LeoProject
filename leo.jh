entity Artist {
    firstname String,
    lastName String,
    birthDate LocalDate,
}

entity ArtistMovieRole {
    name String
}

entity Genre {
    name String
}

entity Movie {
    // lien vers l'API movieDataBase pour les infos du film :
    moviedbID Integer,
    angerAverage Float,
    fearAverage Float,
    disgustAverage Float,
    sadnessAverage Float,
    enjoymentAverage Float,
    angerVotersNumber Integer,
    fearVotersNumber Integer,
    disgustVotersNumber Integer,
    sadnessVotersNumber Integer,
    enjoymentVotersNumber Integer,
}

// 7 émotions par EmotionGroup
entity Emotion {
    name String,
    description String,
    intensity Integer
}

// 5 EmotionGroups
entity EmotionGroup {
    name String,
    description String
}

entity User {
    login String,
    password String,
    email String,
    birthDate LocalDate
}

entity UserVote {
    // Si pas de vote de l'utilisateur pour une émotion : valeur à null,
    // et donc non comptabilisée dans la moyenne de cette émotion
    angerVote Float,
    fearVote Float,
    disgustVote Float,
    sadnessVote Float,
    enjoymentVote Float
}

relationship ManyToOne {
    ArtistMovieRole to Artist,
    Emotion{emotionGroup} to EmotionGroup,
    UserVote{user} to User,
    UserVote{fiction} to Movie,
    UserVote{emotion} to Emotion,
}

relationship OneToMany {
    Movie{genres} to Genre,
    Movie{roles} to ArtistMovieRole,
}


//Set pagination options
//paginate Movie with infinite-scroll
//paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
//service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix